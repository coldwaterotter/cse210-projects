//Git Commands
git status
git add.
git commit -m "Finished prep one"
git push

// Define Types
/*
int
string
float
double
bool
*/
int x;
x = 5;
// Or
int x = 5;
Console.WriteLine(x);

Console.WriteLine("Hello World!");

Console.Write("There will not be a newline after this.");

// Get Input from the user, must be a string
Console.ReadLine();

// Example
Console.Write("What is your favorite color? ");
string color = Console.ReadLine();

if (x > y)
{
  Console.WriteLine("greater");
}

// String Interpolation
string school = "BYU-Idaho";
Console.WriteLine($"I am studying at {school}.");

// If, Else If, and Else

// Operators
/*

== - equal to
!= - not equal
>= - greater than or equal
<= - less than or equal 
&& - and
|| - or
! - Not

*/


//Camel Case

string valueInText = "42";
int number = int.Parse(valueInText);


// Convert String to Int
Console.Write("What is your favorite number? ");
string userInput = Console.ReadLine();
int number = int.Parse(userInput);

// Convert Int to String
int number = 42;
string textVersion = number.ToString();


//while loop
string response = "yes";
while (response == "yes")
{
  Console.Write("Do you want to continue? ");
    response = Console.ReadLine();
}

//do while 
string response;
do
{
    Console.Write("Do you want to continue? ");
    response = Console.ReadLine();
} while (response == "yes");

//for loops
for (int i = 0; i < 10; i++)
{
    Console.WriteLine(i);
}

//foreach 
foreach (string color in colors)
{
    Console.WriteLine(color);
}

//Random
Random randomGenerator = new Random();
int number = randomGenerator.Next(1, 11);
// upper bounds is not inclusive

using System.Collections.Generic;
//Lists 
List<int> numbers;
numbers = new List<int>();
//or
List<string> words = new List<string>();

//add to the list
words.Add("phone");
words.Add("keyboard");
words.Add("mouse");

//size of the list
Console.WriteLine(words.Count);

//iterate through list
foreach (string word in words)
{
    Console.WriteLine(word);
}

for (int i = 0; i < words.Count; i++)
{
    Console.WriteLine(words[i]);
}

//Functions
returnType FunctionName(dataType parameter1, dataType parameter2)
{
    // function_body
}
void DisplayMessage()
{
    Console.WriteLine("Hello world!");
}
// regular or standalone functions 'static'
static void DisplayPersonalMessage(string userName)
{
    Console.WriteLine($"Hello {userName}");
}


// A code template for the category of things known as Person. The
    // responsibility of a Person is to hold and display personal information.
    public class Person
    {
        // The C# convention is to start member variables with an underscore _
        public string _givenName = "";
        public string _familyName = "";

        // A special method, called a constructor that is invoked using the  
        // new keyword followed by the class name and parentheses.
        public Person()
        {
        }

        // A method that displays the person's full name as used in eastern 
        // countries or <family name, given name>.
        public void ShowEasternName()
        {
            Console.WriteLine($"{_familyName}, {_givenName}");
        }

        // A method that displays the person's full name as used in western 
        // countries or <given name family name>.
        public void ShowWesternName()
        {
            Console.WriteLine($"{_givenName} {_familyName}");
        }
    }

/*Class: Person
Attributes:
* _givenName : string
* _familyName : string

Behaviors:
* ShowEasternName() : void
* ShowWesternName() : void
*/

    Person person1 = new Person();
    person1._givenName = "Emma";
    person1._familyName = "Smith";
    person1.ShowWesternName();

    Person person2 = new Person();
    person2._givenName = "Joseph";
    person2._familyName = "Smith";
    person2.ShowWesternName();
    
//Output:
    Emma Smith
    Joseph Smith
    

public class Blind
{
    public double _width;
    public double _height;
    public string _color;
    
    public double GetArea()
    {
        return _width * _height;
    }
}

Blind kitchen = new Blind();

kitchen._width = 60;
kitchen._height = 48;
kitchen._color = "White";

double materialAmount = kitchen.GetArea();

//objects within objects
public class House
{
    public string _owner;
    public Blind _kitchen = new Blind();
    public Blind _livingRoom = new Bind();
}

House johnsonHome = new House();
johnsonHome._owner = "Johnson Family";
johnsonHome._kitchen._width = 60;


//List of Custrom Types
public class House
{
    public string _owner;
    public List<Blind> _blinds = new List<Blind>();
}
johnsonHome._blinds.Add(kitchen);
//or 
double amount = johnsonHome._blinds[0].GetArea();
//or 
foreach (Blind b in johnsonHome._blinds)
{
    double amount = b.GetArea();
}

//Class - A new custom data type that defines attributes (member variables) and methods. This is like a blueprint to create instances or objects of that class.

//Instance - A variable whose data type is the class. We often use the term Object interchangeably.

//Instantiate - A verb that means "to create an instance of."

//Method - A member function. Methods are called using "dot notation" with an instance of the class before the dot.